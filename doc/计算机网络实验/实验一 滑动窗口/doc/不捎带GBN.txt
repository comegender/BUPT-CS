#include <stdio.h>
#include <string.h>
#include "protocol.h"
#include "datalink.h"

#define DATA_TIMER  1000
#define MAX_SEQ 15
#define ACK_TIMER 300
#define UPGRATE(a) if(a<MAX_SEQ) a++;else a=0

struct FRAME {
    unsigned char kind; /* FRAME_DATA */
    unsigned char ack;
    unsigned char seq;
    unsigned char data[PKT_LEN];
    unsigned int  padding;
};

static unsigned char frame_nr = 0, buffer[MAX_SEQ + 1][PKT_LEN], nbuffered = 0;
static unsigned char frame_expected = 0, ack_expected = 0;
static int phl_ready = 0;

static void put_frame(unsigned char* frame, int len)
{
    *(unsigned int*)(frame + len) = crc32(frame, len);
    send_frame(frame, len + 4);
    phl_ready = 0;
}

int Is_inWindows(unsigned char ack_expected, unsigned char now_ack, unsigned char next_frame) {
    if (((ack_expected <= now_ack) && (now_ack < next_frame)) || ((next_frame < ack_expected) && (ack_expected <= now_ack)) || ((now_ack < next_frame) && (next_frame < ack_expected)))
        return 1;
    else
        return 0;
}

static void send_data_frame(void)
{
    struct FRAME s;

    s.kind = FRAME_DATA;
    s.seq = frame_nr;
    s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1);
    memcpy(s.data, buffer[frame_nr], PKT_LEN);

    dbg_frame("Send DATA %d %d, ID %d,windows %d,PHL Queue %d\n", s.seq, s.ack, *(short*)s.data, nbuffered,phl_sq_len());

    put_frame((unsigned char*)&s, 3 + PKT_LEN);
    start_timer(frame_nr, DATA_TIMER);
    UPGRATE(frame_nr);
}

static void send_ack_frame(void)
{
    struct FRAME s;

    s.kind = FRAME_ACK;
    s.ack = (frame_expected + MAX_SEQ) % (MAX_SEQ + 1);

    dbg_frame("Send ACK %d\n", s.ack);

    put_frame((unsigned char*)&s, 2);
}

int main(int argc, char** argv)
{
    int event, arg;
    struct FRAME f;
    int len = 0;

    protocol_init(argc, argv);
    lprintf("Designed by Jiang Yanjun, build: " __DATE__"  "__TIME__"\n");

    disable_network_layer();

    for (;;) {
        event = wait_for_event(&arg);
        switch (event) {
        case NETWORK_LAYER_READY:
            get_packet(buffer[frame_nr]);
            nbuffered++;
            send_data_frame();
            break;

        case PHYSICAL_LAYER_READY:
            phl_ready = 1;
            break;

        case FRAME_RECEIVED:
            len = recv_frame((unsigned char*)&f, sizeof f);
            if (len < 5 || crc32((unsigned char*)&f, len) != 0) {
                dbg_event("**** Receiver Error, Bad CRC Checksum\n");
                break;
            }
            if (f.kind == FRAME_ACK)
                dbg_frame("Recv ACK %d\n", f.ack);
                while (Is_inWindows(ack_expected, f.ack, frame_nr)) {
                    nbuffered--;
                    stop_timer(ack_expected);
                    UPGRATE(ack_expected);
                }
            if (f.kind == FRAME_DATA) {
                dbg_frame("Recv DATA %d %d, ID %d\n", f.seq, f.ack, *(short*)f.data);
                if (f.seq == frame_expected) {
                    put_packet(f.data, len - 7);
                    UPGRATE(frame_expected);
                    send_ack_frame();
                }
            }
            break;

        case DATA_TIMEOUT:
            dbg_event("---- DATA %d timeout\n", arg);
            frame_nr = ack_expected;
            for (int i = 0; i < nbuffered; i++)
            {
                stop_timer((ack_expected + i) % (MAX_SEQ + 1), DATA_TIMER);
            }
            break;
        }
        if (phl_ready && frame_nr != ((ack_expected + nbuffered) % (MAX_SEQ + 1))) {
            send_data_frame();
        }

        if (nbuffered < MAX_SEQ && phl_ready)
            enable_network_layer();
        else
            disable_network_layer();
    }
    return 0;
}